{"version":3,"sources":["components/FetchData.js","hooks/useJsonFetch.js","App.js","reportWebVitals.js","index.js"],"names":["FetchData","props","url","opts","useState","data","setData","loading","setLoading","error","setError","timestampRef","useRef","useEffect","a","timestamp","Date","now","current","fetch","response","ok","Error","statusText","json","result","status","name","message","fetchData","useJsonFetch","console","log","className","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yQAIe,SAASA,EAAUC,GAChC,IACA,ECJa,SAAsBC,EAAKC,GACxC,MAAwBC,mBAAS,MAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA8BF,oBAAS,GAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAA0BJ,mBAAS,MAAnC,mBAAOK,EAAP,KAAcC,EAAd,KACMC,EAAeC,mBA4BrB,OA1BAC,qBAAU,YACO,uCAAG,gCAAAC,EAAA,6DACVC,EAAYC,KAAKC,MACvBN,EAAaO,QAAUH,EACvBP,GAAW,GAHK,kBAKSW,MAAM,GAAD,OAAIjB,EAAJ,YAAWC,IALzB,WAKRiB,EALQ,QAMAC,GANA,sBAON,IAAIC,MAAMF,EAASG,YAPb,UASVZ,EAAaO,UAAYH,EATf,kCAUSK,EAASI,OAVlB,QAUNC,EAVM,OAWZnB,EAAQmB,EAAOC,QACfhB,EAAS,MAZG,0DAedA,EAAS,CACPiB,KAAiB,gBAAX,KAAEA,KAAyB,wFAAoB,KAAEA,KACvDC,QAAS,KAAEA,UAjBC,yBAoBdpB,GAAW,GApBG,6EAAH,oDAuBfqB,KACC,CAAC3B,EAAKC,IACF,CAAE,CAAEE,OAAME,UAASE,UD5BUqB,CADd7B,EAAdC,IAAcD,EAATE,MACb,sBAAUE,EAAV,EAAUA,KAAME,EAAhB,EAAgBA,QAASE,EAAzB,EAAyBA,MAEzB,OADAsB,QAAQC,IAAI,CAAE3B,OAAME,UAASE,UAE3B,sBAAKwB,UAAU,OAAf,UACI1B,GAAW,2CACXF,GAAQ,yCAAYA,KACpBI,GACF,gCACE,2CACA,8BAAMA,EAAMkB,OACZ,8BAAMlB,EAAMmB,gBEbL,SAASM,IACtB,IAAMhC,EAAM,wBACZ,OACE,sBAAK+B,UAAU,MAAf,UACE,cAACjC,EAAD,CAAWE,IAAKA,EAAKC,KAAO,SAC5B,cAACH,EAAD,CAAWE,IAAKA,EAAKC,KAAO,YAC5B,cAACH,EAAD,CAAWE,IAAKA,EAAKC,KAAO,aCTlC,IAYegC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.4ac78c90.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport useJsonFetch from '../hooks/useJsonFetch';\r\n\r\nexport default function FetchData(props) {\r\n  const { url, opts } = props;\r\n  const [ { data, loading, error }] = useJsonFetch(url, opts);\r\n  console.log({ data, loading, error });\r\n  return (\r\n    <div className=\"item\">\r\n      { loading && <p>Loading...</p> }\r\n      { data && <p>Data is {data}</p>}\r\n      { error && \r\n      <div>\r\n        <div>Error is</div>\r\n        <div>{error.name}</div>\r\n        <div>{error.message}</div>\r\n      </div>}\r\n    </div>\r\n  )\r\n}\r\n\r\nFetchData.propTypes = {\r\n  url: PropTypes.string.isRequired,\r\n  opts: PropTypes.string\r\n}","import { useEffect, useState, useRef } from 'react';\r\n\r\nexport default function useJsonFetch(url, opts) {\r\n  const [data, setData] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const timestampRef = useRef();\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const timestamp = Date.now();\r\n      timestampRef.current = timestamp;\r\n      setLoading(true);\r\n      try {\r\n        const response = await fetch(`${url}/${opts}`);\r\n        if (!response.ok) {\r\n          throw new Error(response.statusText);\r\n        }\r\n        if (timestampRef.current === timestamp) {\r\n          const result = await response.json();\r\n          setData(result.status);\r\n          setError(null);\r\n        }\r\n      } catch (e) {\r\n        setError({\r\n          name: e.name === 'SyntaxError' ? 'Ошибка парсинга' : e.name,\r\n          message: e.message\r\n        })\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    }\r\n    fetchData();\r\n  }, [url, opts]);\r\n  return [ { data, loading, error } ];\r\n}","import './App.css';\nimport FetchData from './components/FetchData';\n\nexport default function App() {\n  const url = 'http://localhost:7070'\n  return (\n    <div className=\"app\">\n      <FetchData url={url} opts = 'data' />\n      <FetchData url={url} opts = 'loading' />\n      <FetchData url={url} opts = 'error' />\n    </div>\n  );\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}